datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  country       String?
  linkedIn      String?
  dateJoined    DateTime  @default(now())

  accounts  Account[]
  sessions  Session[]
  Interview Interview[]
  Job       Job[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Interviewer {
  name     String @id
  voice    String
  country  String
  imageUrl String
  bio      String

  Interview Interview[]
}

model Interview {
  id              String   @id @default(cuid())
  interviewerName String
  userId          String
  timeSeconds     Int?
  date            DateTime @default(now())

  Response    Response[]
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  interviewer Interviewer @relation(fields: [interviewerName], references: [name], onDelete: Cascade)
}

model Response {
  id          String @id @default(cuid())
  interviewId String
  question    String
  response    String

  // Metrics
  score            Int?
  timeSeconds      Decimal
  quietTimeSeconds Decimal
  wordFrequency    Json

  interview Interview @relation(fields: [interviewId], references: [id], onDelete: Cascade)
}

model Job {
  id          String  @id @default(cuid())
  userId      String
  title       String
  company     String
  location    String?
  description String
  url         String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
